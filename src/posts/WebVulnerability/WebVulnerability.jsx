import "../posts.css";
import "./WebVulnerability.css";

export default function WebVulnerability() {
  return (
    <div className="post-body">
      <h1>
        Broken Access Control - The Web&apos;s Biggest Security Vulnerability
      </h1>
      <p>
        Part of being a full-stack developer is understanding the security
        vulnerabilities that our applications may be susceptible to, and being
        educated on best practices for addressing these vulnerabilities.
        I&apos;m going to talk a bit about the most common cybersecurity
        vulnerability in 2024: broken access control.
      </p>
      <p>
        What is access control? Access control, also known as authorization, is
        the process of determining what privileges a client of a web application
        has. In a very simple scenario, you might have two different roles for
        access control - a user and an admin. The user would be able to access
        their own profile and public resources, and the admin has access to all
        profiles and resources.
      </p>
      <p>
        Broken access control is a security vulnerability where a client can
        access resources and perform actions that they should not be authorized
        for. One type of broken access control is vertical privilege elevation,
        where a user is able to gain privileges for higher roles, e.g. a user
        accessing the administrator panel or a customer accessing a business
        &apos; resources. Another type is horizontal privilege elevation, where
        a user is able to access the information of another user and/or perform
        actions on their behalf without authenticating themselves as the other
        user.
      </p>
      <p>
        Broken access control affects 3.8% of all web applications tested by the
        Open Web Application Security Project (OWASP), for a total of about
        318,000 web applications tested worldwide. Some consequences of broken
        access control include unauthorized information disclosure, modification
        or destruction of user data, and unauthorized purchases on a business or
        customer&apos;s behalf.
      </p>
      <p>
        Exploiting access control vulnerabilities can be as simple as modifying
        the URL in a web browser, editing HTML, or modifying cookies. There are
        also tools designed to create API requests not intended for the web
        application. For example, these tools might make PUT, POST, and DELETE
        requests to endpoints that were not designed to handle those actions, or
        try to find API endpoints not used by the front end.
      </p>
      <p>
        So how do we prevent broken access control? Well a good place to start
        is with the “principle of least privilege.” Only provide users with the
        minimum functionality needed to use the application as intended. Another
        rule of thumb is “deny by default.” Make all resources inaccessible by
        default, and provide a whitelist depending on account privileges or
        attributes. Some other important principles -
      </p>
      <ul>
        <li>
          Validate permissions on every request. Any endpoint that does not use
          validations can potentially be exploited.
        </li>
        <li>
          Minimize cross-origin resource sharing (CORS). If a resource should
          not be accessed by an origin, disallow it.
        </li>
        <li>
          Disable directory listing. If a malicious actor can see the
          filesystem, it gives them more information needed to make an attack.
        </li>
        <li>Make file metadata (such as .git) not publicly viewable.</li>
        <li>
          Log access control failures, so that information about attacks or bugs
          can be dissected.
        </li>
        <li>Rate limit APIs to prevent automated attacks.</li>
        <li>
          Be thorough in configuring 3<sup>rd</sup> party libraries, and use the
          most secure version of those libraries.
        </li>
        <li>
          Utilize attribute-based access control (ABAC) over role-based access
          control (RBAC). This means that rather than use roles such as admin,
          owner, user, etc., you can provide access to resources based on
          attributes, such as time of day, geographical location of the request,
          whether the terms and conditions have been accepted, or the author of
          a post on social media.
        </li>
        <li>
          Avoid exposing identifiers where possible. For example, including an
          account ID in the query params provides information about accounts
          that can be used to exploit vulnerabilities, especially if account IDs
          are sequentially numbered.
        </li>
        <li>Limit access to static resources where necessary.</li>
        <li>
          Perform all authorization checks on the back-end (but do validations
          on the front end, too!)
        </li>
      </ul>
      <p>
        For a more thorough explanation of this topic, check out the{" "}
        <a
          href="https://cheatsheetseries.owasp.org/cheatsheets/Authorization_Cheat_Sheet.html"
          target="_blank"
        >
          OWASP cheat sheet on authorization
        </a>
        .
      </p>
    </div>
  );
}
